	.version 1.4
	.target sm_10, map_f64_to_f32
	// compiled with /pkgs/cuda-5.0.35/open64/lib//be
	// nvopencc 4.1 built on 2012-09-21

	//-----------------------------------------------------------
	// Compiling /tmp/tmpxft_00007898_00000000-9_kernel.cpp3.i (/tmp/ccBI#.KO0Siz)
	//-----------------------------------------------------------

	//-----------------------------------------------------------
	// Options:
	//-----------------------------------------------------------
	//  Target:ptx, ISA:sm_10, Endian:little, Pointer Size:64
	//  -O3	(Optimization level)
	//  -g0	(Debug level)
	//  -m2	(Report advisories)
	//-----------------------------------------------------------

	.file	1	"<command-line>"
	.file	2	"/tmp/tmpxft_00007898_00000000-8_kernel.cudafe2.gpu"
	.file	3	"/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h"
	.file	4	"/pkgs/cuda-5.0.35/bin/../include/crt/device_runtime.h"
	.file	5	"/pkgs/cuda-5.0.35/bin/../include/host_defines.h"
	.file	6	"/pkgs/cuda-5.0.35/bin/../include/builtin_types.h"
	.file	7	"/pkgs/cuda-5.0.35/bin/../include/device_types.h"
	.file	8	"/pkgs/cuda-5.0.35/bin/../include/driver_types.h"
	.file	9	"/pkgs/cuda-5.0.35/bin/../include/surface_types.h"
	.file	10	"/pkgs/cuda-5.0.35/bin/../include/texture_types.h"
	.file	11	"/pkgs/cuda-5.0.35/bin/../include/vector_types.h"
	.file	12	"/pkgs/cuda-5.0.35/bin/../include/device_launch_parameters.h"
	.file	13	"/pkgs/cuda-5.0.35/bin/../include/crt/storage_class.h"
	.file	14	"kernel.cu"
	.file	15	"/pkgs/cuda-5.0.35/bin/../include/common_functions.h"
	.file	16	"/pkgs/cuda-5.0.35/bin/../include/math_functions.h"
	.file	17	"/pkgs/cuda-5.0.35/bin/../include/math_constants.h"
	.file	18	"/pkgs/cuda-5.0.35/bin/../include/device_functions.h"
	.file	19	"/pkgs/cuda-5.0.35/bin/../include/sm_11_atomic_functions.h"
	.file	20	"/pkgs/cuda-5.0.35/bin/../include/sm_12_atomic_functions.h"
	.file	21	"/pkgs/cuda-5.0.35/bin/../include/sm_13_double_functions.h"
	.file	22	"/pkgs/cuda-5.0.35/bin/../include/sm_20_atomic_functions.h"
	.file	23	"/pkgs/cuda-5.0.35/bin/../include/sm_35_atomic_functions.h"
	.file	24	"/pkgs/cuda-5.0.35/bin/../include/sm_20_intrinsics.h"
	.file	25	"/pkgs/cuda-5.0.35/bin/../include/sm_30_intrinsics.h"
	.file	26	"/pkgs/cuda-5.0.35/bin/../include/sm_35_intrinsics.h"
	.file	27	"/pkgs/cuda-5.0.35/bin/../include/surface_functions.h"
	.file	28	"/pkgs/cuda-5.0.35/bin/../include/texture_fetch_functions.h"
	.file	29	"/pkgs/cuda-5.0.35/bin/../include/texture_indirect_functions.h"
	.file	30	"/pkgs/cuda-5.0.35/bin/../include/surface_indirect_functions.h"
	.file	31	"/pkgs/cuda-5.0.35/bin/../include/math_functions_dbl_ptx1.h"


	.entry _Z12conwayThreadPcS_ii (
		.param .u64 __cudaparm__Z12conwayThreadPcS_ii_oldState,
		.param .u64 __cudaparm__Z12conwayThreadPcS_ii_newState,
		.param .s32 __cudaparm__Z12conwayThreadPcS_ii_rows,
		.param .s32 __cudaparm__Z12conwayThreadPcS_ii_cols)
	{
	.reg .u16 %rh<4>;
	.reg .u32 %r<76>;
	.reg .u64 %rd<23>;
	.reg .pred %p<15>;
	.loc	14	20	0
 //  16  {
 //  17    *idx = row * cols + col;
 //  18  }
 //  19  
 //  20  __global__ void conwayThread(char *oldState, char *newState, int rows, int cols)
$LDWbegin__Z12conwayThreadPcS_ii:
	mov.u16 	%rh1, %ctaid.x;
	mov.u16 	%rh2, %ntid.x;
	mul.wide.u16 	%r1, %rh1, %rh2;
	cvt.u32.u16 	%r2, %tid.x;
	add.u32 	%r3, %r2, %r1;
	ld.param.s32 	%r4, [__cudaparm__Z12conwayThreadPcS_ii_cols];
	ld.param.s32 	%r5, [__cudaparm__Z12conwayThreadPcS_ii_rows];
	mul.lo.s32 	%r6, %r4, %r5;
	setp.lt.s32 	%p1, %r3, %r6;
	@%p1 bra 	$Lt_0_18690;
	bra.uni 	$LBB7__Z12conwayThreadPcS_ii;
$Lt_0_18690:
	ld.param.s32 	%r4, [__cudaparm__Z12conwayThreadPcS_ii_cols];
	.loc	14	50	0
 //  46    tempRow = rowIdx;
 //  47    tempCol = colIdx - 1;
 //  48    if (tempCol < 0)
 //  49      tempCol = cols - 1;
 //  50    coordsToIdx(tempRow, tempCol, &tempIdx, rows, cols);
	sub.s32 	%r7, %r4, 1;
	.loc	14	20	0
	ld.param.s32 	%r5, [__cudaparm__Z12conwayThreadPcS_ii_rows];
	.loc	14	50	0
	div.s32 	%r8, %r3, %r5;
	rem.s32 	%r9, %r3, %r4;
	mul.lo.s32 	%r10, %r8, %r4;
	sub.s32 	%r11, %r9, 1;
	mov.s32 	%r12, 0;
	setp.lt.s32 	%p2, %r11, %r12;
	selp.s32 	%r13, %r7, %r11, %p2;
	ld.param.u64 	%rd1, [__cudaparm__Z12conwayThreadPcS_ii_oldState];
	add.s32 	%r14, %r10, %r13;
	cvt.s64.s32 	%rd2, %r14;
	add.u64 	%rd3, %rd2, %rd1;
	ld.global.s8 	%r15, [%rd3+0];
	mov.s32 	%r16, 1;
	set.eq.u32.s32 	%r17, %r15, %r16;
	neg.s32 	%r18, %r17;
	.loc	14	63	0
 //  59      tempRow = rows - 1;
 //  60    tempCol = colIdx - 1;
 //  61    if (tempCol < 0)
 //  62      tempCol = cols - 1;
 //  63    coordsToIdx(tempRow, tempCol, &tempIdx, rows, cols);
	sub.s32 	%r19, %r5, 1;
	sub.s32 	%r20, %r8, 1;
	mov.s32 	%r21, 0;
	setp.lt.s32 	%p3, %r20, %r21;
	selp.s32 	%r22, %r19, %r20, %p3;
	mul.lo.s32 	%r23, %r22, %r4;
	add.s32 	%r24, %r18, 1;
	add.s32 	%r25, %r13, %r23;
	cvt.s64.s32 	%rd4, %r25;
	add.u64 	%rd5, %rd4, %rd1;
	ld.global.s8 	%r26, [%rd5+0];
	mov.s32 	%r27, 1;
	setp.eq.s32 	%p4, %r26, %r27;
	selp.s32 	%r28, %r24, %r18, %p4;
	.loc	14	73	0
 //  69  
 //  70    tempRow = rowIdx - 1;
 //  71    if (tempRow < 0)
 //  72      tempRow = rows - 1;
 //  73    tempCol = colIdx;
	add.s32 	%r29, %r28, 1;
	add.s32 	%r30, %r9, %r23;
	cvt.s64.s32 	%rd6, %r30;
	add.u64 	%rd7, %rd6, %rd1;
	ld.global.s8 	%r31, [%rd7+0];
	mov.s32 	%r32, 1;
	setp.eq.s32 	%p5, %r31, %r32;
	selp.s32 	%r33, %r29, %r28, %p5;
	.loc	14	86	0
 //  82      tempRow = rows - 1;
 //  83    tempCol = colIdx + 1;
 //  84    if (tempCol >= cols)
 //  85      tempCol = 0;
 //  86    coordsToIdx(tempRow, tempCol, &tempIdx, rows, cols);
	add.s32 	%r34, %r9, 1;
	setp.ge.s32 	%p6, %r34, %r4;
	mov.s32 	%r35, 0;
	selp.s32 	%r36, %r35, %r34, %p6;
	add.s32 	%r37, %r33, 1;
	add.s32 	%r38, %r36, %r23;
	cvt.s64.s32 	%rd8, %r38;
	add.u64 	%rd9, %rd8, %rd1;
	ld.global.s8 	%r39, [%rd9+0];
	mov.s32 	%r40, 1;
	setp.eq.s32 	%p7, %r39, %r40;
	selp.s32 	%r41, %r37, %r33, %p7;
	.loc	14	96	0
 //  92    tempRow = rowIdx;
 //  93    tempCol = colIdx + 1;
 //  94    if (tempCol >= cols)
 //  95      tempCol = 0;
 //  96    coordsToIdx(tempRow, tempCol, &tempIdx, rows, cols);
	add.s32 	%r42, %r41, 1;
	add.s32 	%r43, %r10, %r36;
	cvt.s64.s32 	%rd10, %r43;
	add.u64 	%rd11, %rd10, %rd1;
	ld.global.s8 	%r44, [%rd11+0];
	mov.s32 	%r45, 1;
	setp.eq.s32 	%p8, %r44, %r45;
	selp.s32 	%r46, %r42, %r41, %p8;
	.loc	14	108	0
 // 104      tempRow = 0;
 // 105    tempCol = colIdx + 1;
 // 106    if (tempCol >= cols)
 // 107      tempCol = 0;
 // 108    coordsToIdx(tempRow, tempCol, &tempIdx, rows, cols);
	add.s32 	%r47, %r8, 1;
	setp.ge.s32 	%p9, %r47, %r5;
	mov.s32 	%r48, 0;
	selp.s32 	%r49, %r48, %r47, %p9;
	mul.lo.s32 	%r50, %r49, %r4;
	add.s32 	%r51, %r46, 1;
	add.s32 	%r52, %r36, %r50;
	cvt.s64.s32 	%rd12, %r52;
	add.u64 	%rd13, %rd12, %rd1;
	ld.global.s8 	%r53, [%rd13+0];
	mov.s32 	%r54, 1;
	setp.eq.s32 	%p10, %r53, %r54;
	selp.s32 	%r55, %r51, %r46, %p10;
	.loc	14	117	0
 // 113  
 // 114    tempRow = rowIdx + 1;
 // 115    if (tempRow >= rows)
 // 116      tempRow = 0;
 // 117    tempCol = colIdx;
	add.s32 	%r56, %r55, 1;
	add.s32 	%r57, %r9, %r50;
	cvt.s64.s32 	%rd14, %r57;
	add.u64 	%rd15, %rd14, %rd1;
	ld.global.s8 	%r58, [%rd15+0];
	mov.s32 	%r59, 1;
	setp.eq.s32 	%p11, %r58, %r59;
	selp.s32 	%r60, %r56, %r55, %p11;
	.loc	14	130	0
 // 126      tempRow = 0;
 // 127    tempCol = colIdx - 1;
 // 128    if (tempCol < 0)
 // 129      tempCol = cols - 1;
 // 130    coordsToIdx(tempRow, tempCol, &tempIdx, rows, cols);
	add.s32 	%r61, %r60, 1;
	add.s32 	%r62, %r13, %r50;
	cvt.s64.s32 	%rd16, %r62;
	add.u64 	%rd17, %rd16, %rd1;
	ld.global.s8 	%r63, [%rd17+0];
	mov.s32 	%r64, 1;
	setp.eq.s32 	%p12, %r63, %r64;
	selp.s32 	%r65, %r61, %r60, %p12;
	cvt.s64.s32 	%rd18, %r3;
	ld.param.u64 	%rd19, [__cudaparm__Z12conwayThreadPcS_ii_newState];
	add.u64 	%rd20, %rd18, %rd19;
	add.u64 	%rd21, %rd18, %rd1;
	ld.global.s8 	%r66, [%rd21+0];
	mov.u32 	%r67, 1;
	setp.ne.s32 	%p13, %r66, %r67;
	@%p13 bra 	$Lt_0_19458;
	.loc	14	138	0
 // 134      numLiveNeighbors++;
 // 135  
 // 136    if (oldState[idx] == 1)
 // 137    {
 // 138      if (numLiveNeighbors < 2 || numLiveNeighbors > 3)
	sub.u32 	%r68, %r65, 2;
	mov.u32 	%r69, 1;
	set.le.u32.u32 	%r70, %r68, %r69;
	neg.s32 	%r71, %r70;
	st.global.s8 	[%rd20+0], %r71;
	bra.uni 	$LBB7__Z12conwayThreadPcS_ii;
$Lt_0_19458:
	.loc	14	149	0
 // 145      }
 // 146    }
 // 147    else
 // 148    {
 // 149      if (numLiveNeighbors == 3)
	mov.s32 	%r72, 3;
	set.eq.u32.s32 	%r73, %r65, %r72;
	neg.s32 	%r74, %r73;
	st.global.s8 	[%rd20+0], %r74;
$LBB7__Z12conwayThreadPcS_ii:
	.loc	14	159	0
 // 155        newState[idx] = 0;
 // 156      }
 // 157    }
 // 158    //printf("Cell %d has %d live neighbors\n", idx, numLiveNeighbors);
 // 159  }
	exit;
$LDWend__Z12conwayThreadPcS_ii:
	} // _Z12conwayThreadPcS_ii

